/*
 * This file is generated by jOOQ.
 */
package de.bitcorn.www.pages.database.tables;


import de.bitcorn.www.pages.database.Bitcorn;
import de.bitcorn.www.pages.database.Indexes;
import de.bitcorn.www.pages.database.Keys;
import de.bitcorn.www.pages.database.tables.records.TexturesRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Textures extends TableImpl<TexturesRecord> {

    private static final long serialVersionUID = -888014717;

    /**
     * The reference instance of <code>bitcorn.textures</code>
     */
    public static final Textures TEXTURES = new Textures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TexturesRecord> getRecordType() {
        return TexturesRecord.class;
    }

    /**
     * The column <code>bitcorn.textures.id</code>.
     */
    public final TableField<TexturesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bitcorn.textures.author</code>.
     */
    public final TableField<TexturesRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.date</code>.
     */
    public final TableField<TexturesRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.description</code>.
     */
    public final TableField<TexturesRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.image_path</code>.
     */
    public final TableField<TexturesRecord, String> IMAGE_PATH = createField("image_path", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.image_name</code>.
     */
    public final TableField<TexturesRecord, String> IMAGE_NAME = createField("image_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.licence_link</code>.
     */
    public final TableField<TexturesRecord, String> LICENCE_LINK = createField("licence_link", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.licence_name</code>.
     */
    public final TableField<TexturesRecord, String> LICENCE_NAME = createField("licence_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.path</code>.
     */
    public final TableField<TexturesRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.element_name</code>.
     */
    public final TableField<TexturesRecord, String> ELEMENT_NAME = createField("element_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.tags</code>.
     */
    public final TableField<TexturesRecord, String> TAGS = createField("tags", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.title</code>.
     */
    public final TableField<TexturesRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>bitcorn.textures.writing</code>.
     */
    public final TableField<TexturesRecord, String> WRITING = createField("writing", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * Create a <code>bitcorn.textures</code> table reference
     */
    public Textures() {
        this(DSL.name("textures"), null);
    }

    /**
     * Create an aliased <code>bitcorn.textures</code> table reference
     */
    public Textures(String alias) {
        this(DSL.name(alias), TEXTURES);
    }

    /**
     * Create an aliased <code>bitcorn.textures</code> table reference
     */
    public Textures(Name alias) {
        this(alias, TEXTURES);
    }

    private Textures(Name alias, Table<TexturesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Textures(Name alias, Table<TexturesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Textures(Table<O> child, ForeignKey<O, TexturesRecord> key) {
        super(child, key, TEXTURES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bitcorn.BITCORN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEXTURES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TexturesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TEXTURES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TexturesRecord> getPrimaryKey() {
        return Keys.KEY_TEXTURES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TexturesRecord>> getKeys() {
        return Arrays.<UniqueKey<TexturesRecord>>asList(Keys.KEY_TEXTURES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Textures as(String alias) {
        return new Textures(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Textures as(Name alias) {
        return new Textures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Textures rename(String name) {
        return new Textures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Textures rename(Name name) {
        return new Textures(name, null);
    }
}
