/*
 * This file is generated by jOOQ.
 */
package bitcorn.pages.database.tables.records;


import bitcorn.pages.database.tables.Contact;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactRecord extends UpdatableRecordImpl<ContactRecord> implements Record3<Timestamp, String, String> {

    private static final long serialVersionUID = 1892275508;

    /**
     * Setter for <code>bitcorn.contact.received</code>.
     */
    public void setReceived(Timestamp value) {
        set(0, value);
    }

    /**
     * Getter for <code>bitcorn.contact.received</code>.
     */
    public Timestamp getReceived() {
        return (Timestamp) get(0);
    }

    /**
     * Setter for <code>bitcorn.contact.email</code>.
     */
    public void setEmail(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bitcorn.contact.email</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bitcorn.contact.message</code>.
     */
    public void setMessage(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>bitcorn.contact.message</code>.
     */
    public String getMessage() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Timestamp> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Timestamp, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Timestamp, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field1() {
        return Contact.CONTACT.RECEIVED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Contact.CONTACT.EMAIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Contact.CONTACT.MESSAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component1() {
        return getReceived();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getEmail();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getMessage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value1() {
        return getReceived();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getEmail();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getMessage();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactRecord value1(Timestamp value) {
        setReceived(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactRecord value2(String value) {
        setEmail(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactRecord value3(String value) {
        setMessage(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactRecord values(Timestamp value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContactRecord
     */
    public ContactRecord() {
        super(Contact.CONTACT);
    }

    /**
     * Create a detached, initialised ContactRecord
     */
    public ContactRecord(Timestamp received, String email, String message) {
        super(Contact.CONTACT);

        set(0, received);
        set(1, email);
        set(2, message);
    }
}
