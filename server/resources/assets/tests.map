{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","bitcorn/tests/integration/components/settings-modal-test.js","bitcorn/tests/lint/app.lint-test.js","bitcorn/tests/lint/templates.template.lint-test.js","bitcorn/tests/lint/tests.lint-test.js","bitcorn/tests/test-helper.js","bitcorn/tests/unit/controllers/index-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"bitcorn/tests/integration/components/settings-modal-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | settings-modal', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UO2DCNLN\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"settings-modal\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3mFlgLNX\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"settings-modal\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"bitcorn/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define(\"bitcorn/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('bitcorn/templates/about.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/about.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('bitcorn/templates/about/authors.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/about/authors.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('bitcorn/templates/about/page.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/about/page.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('bitcorn/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'bitcorn/templates/application.hbs should pass TemplateLint.\\n\\nbitcorn/templates/application.hbs\\n  46:41  error  Interaction added to non-interactive element  no-invalid-interactive\\n');\n  });\n  QUnit.test('bitcorn/templates/components/settings-modal.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/components/settings-modal.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('bitcorn/templates/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/contact.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('bitcorn/templates/home.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/home.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('bitcorn/templates/imprint.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/imprint.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('bitcorn/templates/privacy.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'bitcorn/templates/privacy.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"bitcorn/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define(\"bitcorn/tests/test-helper\", [\"bitcorn/app\", \"bitcorn/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"bitcorn/tests/unit/controllers/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:index');\n      assert.ok(controller);\n    });\n  });\n});","define('bitcorn/config/environment', [], function() {\n  var prefix = 'bitcorn';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('bitcorn/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}